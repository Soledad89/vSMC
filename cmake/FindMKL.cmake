SET (MKL_FOUND TRUE)

OPTION (MKL_USE_STATIC_LIBS "Link MKL statically")
OPTION (MKL_USE_THREAD "Link MKL multithread static interface")
OPTION (MKL_USE_ILP64 "Link MKL 64bit integer static interface")

IF (NOT MKL_LINK_LIBRARIES)
    SET (MKL_LIB_PATH ${MKL_LIB_PATH} $ENV{MKLROOT}/lib)
    SET (MKL_LIB_PATH ${MKL_LIB_PATH} $ENV{MKLROOT}/lib/intel64)
    SET (MKL_LIB_PATH ${MKL_LIB_PATH} $ENV{MKLROOT}/lib/ia32)
    SET (MKL_LIB_PATH ${MKL_LIB_PATH} /opt/intel/mkl/lib)
    SET (MKL_LIB_PATH ${MKL_LIB_PATH} /opt/intel/mkl/lib/intel64)
    SET (MKL_LIB_PATH ${MKL_LIB_PATH} /opt/intel/mkl/lib/ia32)

    FIND_LIBRARY (MKL_LIB_MKL_RT mkl_rt
        PATHS ${MKL_LIB_PATH} ENV LIBRARY_PTH)

    FIND_FILE (MKL_LIB_MKL_INTEL_LP64 libmkl_intel_lp64.a
        PATHS ${MKL_LIB_PATH} ENV LIBRARY_PTH)
    FIND_FILE (MKL_LIB_MKL_INTEL_ILP64 libmkl_intel_ilp64.a
        PATHS ${MKL_LIB_PATH} ENV LIBRARY_PTH)

    FIND_FILE (MKL_LIB_MKL_SEQUENTIAL libmkl_sequential.a
        PATHS ${MKL_LIB_PATH} ENV LIBRARY_PTH)
    FIND_FILE (MKL_LIB_MKL_INTEL_THREAD libmkl_intel_thread.a
        PATHS ${MKL_LIB_PATH} ENV LIBRARY_PTH)

    FIND_FILE (MKL_LIB_MKL_CORE libmkl_core.a
        PATHS ${MKL_LIB_PATH} ENV LIBRARY_PTH)

    IF (MKL_USE_STATIC_LIBS)
        IF (MKL_USE_ILP64)
            IF (MKL_LIB_MKL_INTEL_ILP64)
                SET (MKL_LINK_LIBRARIES ${MKL_LINK_LIBRARIES}
                    ${MKL_LIB_MKL_INTEL_ILP64})
            ENDIF (MKL_LIB_MKL_INTEL_ILP64)
        ELSE (MKL_USE_ILP64)
            IF (MKL_LIB_MKL_INTEL_LP64)
                SET (MKL_LINK_LIBRARIES ${MKL_LINK_LIBRARIES}
                    ${MKL_LIB_MKL_INTEL_LP64})
            ENDIF (MKL_LIB_MKL_INTEL_LP64)
        ENDIF (MKL_USE_ILP64)
        IF (MKL_USE_THREAD)
            IF (MKL_LIB_MKL_INTEL_THREAD)
                SET (MKL_LINK_LIBRARIES ${MKL_LINK_LIBRARIES}
                    ${MKL_LIB_MKL_INTEL_THREAD})
            ENDIF (MKL_LIB_MKL_INTEL_THREAD)
        ELSE (MKL_USE_THREAD)
            IF (MKL_LIB_MKL_SEQUENTIAL)
                SET (MKL_LINK_LIBRARIES ${MKL_LINK_LIBRARIES}
                    ${MKL_LIB_MKL_SEQUENTIAL})
            ENDIF (MKL_LIB_MKL_SEQUENTIAL)
        ENDIF (MKL_USE_THREAD)
        IF (MKL_LIB_MKL_CORE)
            SET (MKL_LINK_LIBRARIES ${MKL_LINK_LIBRARIES}
                ${MKL_LIB_MKL_CORE})
        ENDIF (MKL_LIB_MKL_CORE)
        IF (UNIX AND NOT APPLE)
            SET (MKL_LINK_LIBRARIES "-Wl,--start-group"
                ${MKL_LINK_LIBRARIES} "-Wl,--end-group")
        ENDIF (UNIX AND NOT APPLE)
    ELSE (MKL_USE_STATIC_LIBS)
        IF (MKL_LIB_MKL_RT)
            SET (MKL_LINK_LIBRARIES ${MKL_LIB_MKL_RT})
        ENDIF (MKL_LIB_MKL_RT)
    ENDIF (MKL_USE_STATIC_LIBS)
ENDIF (NOT MKL_LINK_LIBRARIES)

IF (MKL_LINK_LIBRARIES)
    INCLUDE (FindThreads)
    SET (MKL_LINK_LIBRARIES ${MKL_LINK_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
    SET (MKL_LINK_LIBRARIES_RELEASE ${MKL_LINK_LIBRARIES})
    SET (MKL_LINK_LIBRARIES_DEBUG ${MKL_LINK_LIBRARIES})
    MESSAGE (STATUS "Found MKL libraries: ${MKL_LINK_LIBRARIES}")
ELSE (MKL_LINK_LIBRARIES)
    MESSAGE (STATUS "NOT Found MKL libraries")
    SET (MKL_FOUND FALSE)
ENDIF (MKL_LINK_LIBRARIES)

IF (NOT MKL_INCLUDE_DIR)
    IF (MSVC)
        IF (NOT MKL_INC_PATH)
            SET (MKL_INC_PATH "${MKL_ROOT}/include")
        ENDIF (NOT MKL_INC_PATH)
    ENDIF(MSVC)
    SET (MKL_INC_PATH ${MKL_INC_PATH} $ENV{MKLROOT}/include)
    FIND_PATH (MKL_INCLUDE_DIR mkl_blas.h PATHS ${MKL_INC_PATH} ENV CPATH)
ENDIF (NOT MKL_INCLUDE_DIR)

IF (MKL_INCLUDE_DIR)
    MESSAGE (STATUS "Found MKL headers: ${MKL_INCLUDE_DIR}")
ELSE (MKL_INCLUDE_DIR)
    MESSAGE (STATUS "NOT Found MKL headers")
    SET (MKL_FOUND FALSE)
ENDIF (MKL_INCLUDE_DIR)
