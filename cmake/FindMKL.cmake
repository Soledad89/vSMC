SET (MKL_FOUND TRUE)

SET (MKL_LIB_PATH ${MKL_LIB_PATH} $ENV{MKLROOT}/lib)
SET (MKL_LIB_PATH ${MKL_LIB_PATH} $ENV{MKLROOT}/lib/intel64)
SET (MKL_LIB_PATH ${MKL_LIB_PATH} $ENV{MKLROOT}/lib/ia32)
SET (MKL_LIB_PATH ${MKL_LIB_PATH} /opt/intel/mkl/lib)
SET (MKL_LIB_PATH ${MKL_LIB_PATH} /opt/intel/mkl/lib/intel64)
SET (MKL_LIB_PATH ${MKL_LIB_PATH} /opt/intel/mkl/lib/ia32)

IF (NOT MKL_LINK_LIBARIES)
    IF (WIN32)
        FIND_PATH (MKL_LIB_DIR libmkl_core.lib
            PATHS ${MKL_LIB_PATH} ENV LIBRARY_PATH)
    ELSE (WIN32)
        FIND_PATH (MKL_LIB_DIR libmkl_core.a
            PATHS ${MKL_LIB_PATH} ENV LIBRARY_PATH)
    ENDIF (WIN32)

    IF (${MKL_LIB_DIR} STREQUAL MKL_LIB_DIR-NOTFOUND)
        MESSAGE (STATUS "NOT Found MKL")
        SET (MKL_FOUND FALSE)
    ELSE (${MKL_LIB_DIR} STREQUAL MKL_LIB_DIR-NOTFOUND)
        IF (WIN32)
            FIND_LIBRARY (MKL_LINK_LIBRARIES mkl_rt ${MKL_LIB_DIR})
            MESSAGE (STATUS "Found MKL: ${MKL_LINK_LIBRARIES}")
        ELSE(WIN32)
            FIND_LIBRARY (MKL_INTERFACE_LIB mkl_intel_lp64 ${MKL_LIB_DIR})
            FIND_LIBRARY (MKL_THREADING_LIB mkl_sequential ${MKL_LIB_DIR})
            FIND_LIBRARY (MKL_COMPUTING_LIB mkl_core       ${MKL_LIB_DIR})
            SET (MKL_LINK_LIBRARIES ${MKL_LINK_LIBRARIES} ${MKL_INTERFACE_LIB})
            SET (MKL_LINK_LIBRARIES ${MKL_LINK_LIBRARIES} ${MKL_THREADING_LIB})
            SET (MKL_LINK_LIBRARIES ${MKL_LINK_LIBRARIES} ${MKL_COMPUTING_LIB})
            MESSAGE (STATUS "Found MKL: ${MKL_LINK_LIBRARIES}")
        ENDIF (WIN32)
    ENDIF (${MKL_LIB_DIR} STREQUAL MKL_LIB_DIR-NOTFOUND)
ELSE (NOT MKL_LINK_LIBARIES)
    MESSAGE (STATUS "Found MKL: ${MKL_LINK_LIBRARIES}")
ENDIF (NOT MKL_LINK_LIBARIES)

IF (NOT MKL_INCLUD_DIR)
    SET (MKL_INC_PATH ${MKL_INC_PATH} $ENV{MKLROOT}/include)
    FIND_PATH (MKL_INCLUDE_DIR mkl_vml.h PATHS ${MKL_INC_PATH} ENV INCLUDE)
    IF (${MKL_INCLUDE_DIR} STREQUAL MKL_INCLUDE_DIR-NOTFOUND)
        MESSAGE (STATUS "NOT Found MKL headers")
        SET (MKL_FOUND FALSE)
    ELSE (${MKL_INCLUDE_DIR} STREQUAL MKL_INCLUDE_DIR-NOTFOUND)
        MESSAGE (STATUS "Found MKL headers: ${MKL_INCLUDE_DIR}")
    ENDIF (${MKL_INCLUDE_DIR} STREQUAL MKL_INCLUDE_DIR-NOTFOUND)
ELSE (NOT MKL_INCLUD_DIR)
    MESSAGE (STATUS "Found MKL headers: ${MKL_INCLUDE_DIR}")
ENDIF (NOT MKL_INCLUD_DIR)

IF (WIN32)
    SET (MKL_DLL_PATH ${MKL_DLL_PATH} $ENV{MKLROOT}/bin)
    FIND_FILE (MKL_DLL mkl_rt.dll PATHS ${MKL_DLL_PATH})
    IF (${MKL_DLL} STREQUAL MKL_DLL-NOTFOUND)
        MESSAGE (STATUS "NOT Found MKL DLL")
        SET (MKL_FOUND FALSE)
    ELSE (${MKL_DLL} STREQUAL MKL_DLL-NOTFOUND)
        MESSAGE (STATUS "Found MKL DLL: ${MKL_DLL}")
    ENDIF (${MKL_DLL} STREQUAL MKL_DLL-NOTFOUND)
    SET (MKL_DLL_PATH ${MKL_DLL_PATH} $ENV{MKLROOT}/bin)
ENDIF (WIN32)
