# ============================================================================
#  cmake/vSMCFindFunctional.cmake
# ----------------------------------------------------------------------------
#
#                          vSMC: Scalable Monte Carlo
#
#  This file is distribured under the 2-clauses BSD License.
#  See LICENSE for details.
# ============================================================================

IF (DEFINED VSMC_FUNCTIONAL_FOUND)
    RETURN ()
ENDIF (DEFINED VSMC_FUNCTIONAL_FOUND)

FILE (READ ${CMAKE_CURRENT_LIST_DIR}/vSMCFindFunctional.cpp
    VSMC_FUNCTIONAL_TEST_SOURCE)

INCLUDE (CheckCXXSourceRuns)
SET (SAFE_CMAKE_REQUIRED_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS})

IF (VSMC_ENABLE_CXX11)
    SET (CMAKE_REQUIRED_DEFINITIONS ${SAFE_CMAKE_REQUIRED_DEFINITIONS}
        -DVSMC_HAS_CXX11LIB_FUNCTIONAL=1)
    CHECK_CXX_SOURCE_RUNS ("${VSMC_FUNCTIONAL_TEST_SOURCE}"
        VSMC_FUNCTIONAL_STD_FOUND)
ENDIF (VSMC_ENABLE_CXX11)

IF (NOT VSMC_FUNCTIONAL_STD_FOUND)
    SET (CMAKE_REQUIRED_DEFINITIONS ${SAFE_CMAKE_REQUIRED_DEFINITIONS}
        -DVSMC_HAS_CXX11LIB_FUNCTIONAL=0)
    CHECK_CXX_SOURCE_RUNS ("${VSMC_FUNCTIONAL_TEST_SOURCE}"
        VSMC_FUNCTIONAL_BOOST_FOUND)
ENDIF (NOT VSMC_FUNCTIONAL_STD_FOUND)

IF (VSMC_FUNCTIONAL_STD_FOUND OR VSMC_FUNCTIONAL_BOOST_FOUND)
    SET (VSMC_FUNCTIONAL_FOUND TRUE CACHE BOOL "Found functional")
ENDIF (VSMC_FUNCTIONAL_STD_FOUND OR VSMC_FUNCTIONAL_BOOST_FOUND)

SET (CMAKE_REQUIRED_DEFINITIONS ${SAFE_CMAKE_REQUIRED_DEFINITIONS})
