SET (MATH_ISFINITE_TEST_SOURCE "
#include <cassert>
#include <limits>
#include <cmath>

#ifdef MATH_ISFINITE_C99_FOUND
#define MATH_ISFINITE isfinite
#endif

#ifdef MATH_ISFINITE_STD_FOUND
#define MATH_ISFINITE std::isfinite
#endif

#ifdef MATH_ISFINITE_BOOST_FOUND
#include <boost/math/special_functions/fpclassify.hpp>
#define MATH_ISFINITE boost::math::isfinite
#endif

int main ()
{
    double x =  std::numeric_limits<double>::infinity();
    assert(!MATH_ISFINITE(x));

    return 0;
}
")

IF (NOT MATH_ISFINITE_FOUND)
    UNSET (MATH_ISFINITE_FOUND CACHE)
    UNSET (MATH_ISFINITE_C99_FOUND CACHE)
    UNSET (MATH_ISFINITE_STD_FOUND CACHE)
    UNSET (MATH_ISFINITE_BOOST_FOUND CACHE)
    INCLUDE (FindBoost)
    SET (SAFE_CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES})
    SET (CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}
        ${Boost_INCLUDE_DIRS})
    CHECK_CXX_SOURCE_RUNS ("${MATH_ISFINITE_TEST_SOURCE}"
        MATH_ISFINITE_C99_FOUND)
    CHECK_CXX_SOURCE_RUNS ("${MATH_ISFINITE_TEST_SOURCE}"
        MATH_ISFINITE_STD_FOUND)
    CHECK_CXX_SOURCE_RUNS ("${MATH_ISFINITE_TEST_SOURCE}"
        MATH_ISFINITE_BOOST_FOUND)
    IF (MATH_ISFINITE_C99_FOUND OR MATH_ISFINITE_STD_FOUND OR
            MATH_ISFINITE_BOOST_FOUND)
	SET (MATH_ISFINITE_FOUND TRUE)
    ENDIF (MATH_ISFINITE_C99_FOUND OR MATH_ISFINITE_STD_FOUND OR
        MATH_ISFINITE_BOOST_FOUND)
    SET (CMAKE_REQUIRED_INCLUDES ${SAFE_CMAKE_REQUIRED_INCLUDES})
ENDIF (NOT MATH_ISFINITE_FOUND)
