CMAKE_MINIMUM_REQUIRED (VERSION 2.8)

# Disable in source build
IF(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
    MESSAGE(FATAL_ERROR "In-source builds not allowed. Please make a new directory and run CMake from there.")
ENDIF(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})

PROJECT (vSMC C CXX)

# Version information
SET (VERSION_MAJOR 0)
SET (VERSION_MINOR 9)
SET (VERSION_PATCH 0)

# Configuration files
SET (DOC_SOURCE  ${PROJECT_SOURCE_DIR}/doc)
SET (DOC_INCLUDE ${PROJECT_SOURCE_DIR}/include)
CONFIGURE_FILE (
    ${PROJECT_SOURCE_DIR}/config/version.hpp.in
    ${PROJECT_SOURCE_DIR}/include/vsmc/internal/version.hpp)
CONFIGURE_FILE (
    ${PROJECT_SOURCE_DIR}/config/Doxyfile.in
    ${PROJECT_BINARY_DIR}/Doxyfile)

# Options
OPTION (VSMC_DISABLE_TEST "Disable building tests, examples and libraries")
IF (NOT VSMC_INSTALL_INC_DIR)
    SET (VSMC_INSTALL_INC_DIR include)
ENDIF (NOT VSMC_INSTALL_INC_DIR)
IF (NOT VSMC_INSTALL_DOC_DIR)
    SET (VSMC_INSTALL_DOC_DIR doc)
ENDIF (NOT VSMC_INSTALL_DOC_DIR)

# Installation
INSTALL (FILES     include/vsmc.hpp DESTINATION ${VSMC_INSTALL_INC_DIR})
INSTALL (DIRECTORY include/vsmc/    DESTINATION ${VSMC_INSTALL_INC_DIR}/vsmc
    PATTERN ".DS_Store" EXCLUDE PATTERN "*.swp"EXCLUDE)

# Documentations
INCLUDE (FindDoxygen)
FILE (GLOB_RECURSE DOC_SOURCE_FILES ${PROJECT_SOURCE_DIR}/doc/*.*)
FILE (GLOB_RECURSE DOC_INCLUDE_FILES ${PROJECT_SOURCE_DIR}/include/*.hpp)
IF (DOXYGEN_FOUND)
    ADD_CUSTOM_COMMAND (
        OUTPUT  ${PROJECT_BINARY_DIR}/doc
        DEPENDS ${PROJECT_BINARY_DIR}/Doxyfile
        ${DOC_SOURCE_FILES} ${DOC_INCLUDE_FILES}
        WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
        COMMAND ${DOXYGEN_EXECUTABLE} ARGS Doxyfile)
    ADD_CUSTOM_TARGET(docs DEPENDS ${PROJECT_BINARY_DIR}/doc)
ENDIF (DOXYGEN_FOUND)

# Finish here if we disable test
IF (VSMC_DISABLE_TEST)
    RETURN ()
ENDIF (VSMC_DISABLE_TEST)

# Module path
SET (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake)

# Included scripts
SET (Boost_NO_BOOST_CMAKE     ON)
SET (Boost_USE_STATIC_LIBS    ON)
SET (Boost_USE_MULTITHREADED  ON)
SET (Boost_USE_STATIC_RUNTIME OFF)
SET (Boost_ADDITIONAL_VERSIONS
    "1.47" "1.47.0" "1.48" "1.48.0" "1.49" "1.49.0"
    "1.50" "1.50.0" "1.51" "1.51.0", "1.52", "1.52.0")
INCLUDE (FindBoost)
INCLUDE (FindTBB)
INCLUDE (FindCilk)
INCLUDE (FindOpenCL)
INCLUDE (FindOpenMP)
INCLUDE (FindThreads)
INCLUDE (vSMCFunctions)

# Testing
INCLUDE (CheckCXXSourceRuns)

INCLUDE_DIRECTORIES (${PROJECT_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES (SYSTEM ${PROJECT_SOURCE_DIR}/third-party/include)

SET (CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}
    ${PROJECT_SOURCE_DIR}/include)
SET (CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}
    ${PROJECT_SOURCE_DIR}/third-party/include)

IF (Boost_FOUND)
    INCLUDE_DIRECTORIES (SYSTEM ${Boost_INCLUDE_DIRS})
    SET (CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}
        ${Boost_INCLUDE_DIRS})
ENDIF (Boost_FOUND)

IF (OPENCL_FOUND)
    INCLUDE_DIRECTORIES (SYSTEM ${OpenCL_INCLUDE_DIR})
    SET (CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}
        ${OpenCL_INCLUDE_DIR})
    SET (VSMC_CL_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/include)
    SET (VSMC_R123_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/third-party/include)
ENDIF (OPENCL_FOUND)

IF (OPENMP_FOUND)
    IF (NOT MSVC)
        SET (OpenMP_LINK_LIBRARIES ${OpenMP_CXX_FLAGS})
    ENDIF (NOT MSVC)
ENDIF (OPENMP_FOUND)

IF (TBB_FOUND)
    INCLUDE_DIRECTORIES (SYSTEM ${TBB_INCLUDE_DIR})
ENDIF (TBB_FOUND)

SET (VSMC_TEST TRUE)

# Test OpenCL
IF (OPENCL_FOUND)
    SET (CMAKE_REQUIRED_FLAGS ${OpenCL_CXX_FLAGS})
    IF (OpenCL_LINK_LIBRARIES)
        SET (CMAKE_REQUIRED_LIBRARIES ${OpenCL_LINK_LIBRARIES})
    ENDIF (OpenCL_LINK_LIBRARIES)
    FILE (READ ${PROJECT_SOURCE_DIR}/cmake/try_opencl.cpp TRY_OPENCL_CPP)
    CHECK_CXX_SOURCE_RUNS ("${TRY_OPENCL_CPP}" VSMC_OPENCL_FOUND)
    IF (NOT VSMC_OPENCL_FOUND)
        SET (OPENCL_FOUND FALSE)
    ENDIF (NOT VSMC_OPENCL_FOUND)
    SET (CMAKE_REQUIRED_FLAGS)
    SET (CMAKE_REQUIRED_LIBRARIES)
ENDIF (OPENCL_FOUND)

# Test OpenMP
IF (OPENMP_FOUND)
    SET (CMAKE_REQUIRED_FLAGS ${OpenMP_CXX_FLAGS})
    IF (OpenMP_LINK_LIBRARIES)
        SET (CMAKE_REQUIRED_LIBRARIES ${OpenMP_LINK_LIBRARIES})
    ENDIF (OpenMP_LINK_LIBRARIES)
    FILE (READ ${PROJECT_SOURCE_DIR}/cmake/try_openmp.cpp TRY_OPENMP_CPP)
    CHECK_CXX_SOURCE_RUNS ("${TRY_OPENMP_CPP}" VSMC_OPENMP_FOUND)
    IF (NOT VSMC_OPENMP_FOUND)
        SET (OPENMP_FOUND FALSE)
    ENDIF (NOT VSMC_OPENMP_FOUND)
    SET (CMAKE_REQUIRED_FLAGS)
    SET (CMAKE_REQUIRED_LIBRARIES)
ENDIF (OPENMP_FOUND)

# Test <thread> <mutex>
FIND_PACKAGE (Boost COMPONENTS thread system chrono date_time)
IF (Boost_FOUND)
    SET (THREAD_LINK_LIBRARIES
        ${Boost_THREAD_LIBRARY} ${Boost_SYSTEM_LIBRARY}
        ${Boost_CHRONO_LIBRARY} ${Boost_DATE_TIME_LIBRARY}
        ${CMAKE_THREAD_LIBS_INIT})
    SET (CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES}
        ${Boost_THREAD_LIBRARY_DEBUG} ${Boost_SYSTEM_LIBRARY_DEBUG}
        ${Boost_CHRONO_LIBRARY_DEBUG} ${Boost_DATE_TIME_LIBRARY_DEBUG}
        ${CMAKE_THREAD_LIBS_INIT})
ELSE (Boost_FOUND)
    SET (THREAD_LINK_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})
    SET (CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES}
        ${CMAKE_THREAD_LIBS_INIT})
ENDIF (Boost_FOUND)
IF (UNIX AND NOT APPLE)
    FIND_LIBRARY (LINUX_RT rt)
    IF (LINUX_RT)
        SET (THREAD_LINK_LIBRARIES ${THREAD_LINK_LIBRARIES} ${LINUX_RT})
        SET (CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES}
            ${LINUX_RT})
    ENDIF (LINUX_RT)
ENDIF (UNIX AND NOT APPLE)
SET (MUTEX_LINK_LIBRARIES ${THREAD_LINK_LIBRARIES})
FILE (READ ${PROJECT_SOURCE_DIR}/cmake/try_thread.cpp TRY_THREAD_CPP)
SET (CMAKE_REQUIRED_FLAGS "-DVSMC_HAS_CXX11LIB_THREAD=1")
CHECK_CXX_SOURCE_RUNS ("${TRY_THREAD_CPP}" VSMC_USE_STD_THREAD)
SET (CMAKE_REQUIRED_FLAGS "-DVSMC_HAS_CXX11LIB_THREAD=0")
CHECK_CXX_SOURCE_RUNS ("${TRY_THREAD_CPP}" VSMC_USE_BOOST_THREAD)
FILE (READ ${PROJECT_SOURCE_DIR}/cmake/try_mutex.cpp TRY_MUTEX_CPP)
SET (CMAKE_REQUIRED_FLAGS "-DVSMC_HAS_CXX11LIB_MUTEX=1")
CHECK_CXX_SOURCE_RUNS ("${TRY_MUTEX_CPP}" VSMC_USE_STD_MUTEX)
SET (CMAKE_REQUIRED_FLAGS "-DVSMC_HAS_CXX11LIB_MUTEX=0")
CHECK_CXX_SOURCE_RUNS ("${TRY_MUTEX_CPP}" VSMC_USE_BOOST_MUTEX)

SET (VSMC_USE_THREAD FALSE)
IF (VSMC_USE_STD_THREAD)
    SET (VSMC_USE_THREAD TRUE)
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -DVSMC_HAS_CXX11LIB_THREAD=1")
ELSEIF (VSMC_USE_BOOST_THREAD)
    SET (VSMC_USE_THREAD TRUE)
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -DVSMC_HAS_CXX11LIB_THREAD=0")
ENDIF (VSMC_USE_STD_THREAD)

SET (VSMC_USE_MUTEX FALSE)
IF (VSMC_USE_STD_MUTEX)
    SET (VSMC_USE_MUTEX TRUE)
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -DVSMC_HAS_CXX11LIB_MUTEX=1")
ELSEIF (VSMC_USE_BOOST_MUTEX)
    SET (VSMC_USE_MUTEX TRUE)
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -DVSMC_HAS_CXX11LIB_MUTEX=0")
ENDIF (VSMC_USE_STD_MUTEX)

SET (CMAKE_REQUIRED_FLAGS)
SET (CMAKE_REQUIRED_LIBRARIES)

# Test <functional>
FILE (READ ${PROJECT_SOURCE_DIR}/cmake/try_functional.cpp TRY_FUNCTIONAL_CPP)
SET (CMAKE_REQUIRED_FLAGS "-DVSMC_HAS_CXX11LIB_FUNCTIONAL=1")
CHECK_CXX_SOURCE_RUNS ("${TRY_FUNCTIONAL_CPP}" VSMC_USE_STD_FUNCTIONAL)
SET (CMAKE_REQUIRED_FLAGS "-DVSMC_HAS_CXX11LIB_FUNCTIONAL=0")
CHECK_CXX_SOURCE_RUNS ("${TRY_FUNCTIONAL_CPP}" VSMC_USE_BOOST_FUNCTIONAL)
SET (CMAKE_REQUIRED_FLAGS)

IF (VSMC_USE_STD_FUNCTIONAL)
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -DVSMC_HAS_CXX11LIB_FUNCTIONAL=1")
ELSEIF (VSMC_USE_BOOST_FUNCTIONAL)
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -DVSMC_HAS_CXX11LIB_FUNCTIONAL=0")
ELSE (VSMC_USE_STD_FUNCTIONAL)
    SET (VSMC_TEST FALSE)
ENDIF (VSMC_USE_STD_FUNCTIONAL)

# Test <random>
FILE (READ ${PROJECT_SOURCE_DIR}/cmake/try_random.cpp TRY_RANDOM_CPP)
SET (CMAKE_REQUIRED_FLAGS "-DVSMC_HAS_CXX11LIB_RANDOM=1")
CHECK_CXX_SOURCE_RUNS ("${TRY_RANDOM_CPP}" VSMC_USE_STD_RANDOM)
SET (CMAKE_REQUIRED_FLAGS "-DVSMC_HAS_CXX11LIB_RANDOM=0")
CHECK_CXX_SOURCE_RUNS ("${TRY_RANDOM_CPP}" VSMC_USE_BOOST_RANDOM)
SET (CMAKE_REQUIRED_FLAGS "-DVSMC_HAS_CXX11LIB_RANDOM=1")
SET (CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -DVSMC_USE_RANDOM123=0")
CHECK_CXX_SOURCE_RUNS ("${TRY_RANDOM_CPP}" VSMC_USE_STD_RANDOM_NO_R123)
SET (CMAKE_REQUIRED_FLAGS "-DVSMC_HAS_CXX11LIB_RANDOM=0")
SET (CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -DVSMC_USE_RANDOM123=0")
CHECK_CXX_SOURCE_RUNS ("${TRY_RANDOM_CPP}" VSMC_USE_BOOST_RANDOM_NO_R123)
SET (CMAKE_REQUIRED_FLAGS)

IF (VSMC_USE_STD_RANDOM)
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -DVSMC_HAS_CXX11LIB_RANDOM=1")
ELSEIF (VSMC_USE_BOOST_RANDOM)
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -DVSMC_HAS_CXX11LIB_RANDOM=0")
ELSEIF (VSMC_USE_STD_RANDOM_NO_R123)
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -DVSMC_HAS_CXX11LIB_RANDOM=1")
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -DVSMC_USE_RANDOM123=0")
ELSEIF (VSMC_USE_BOOST_RANDOM_NO_R123)
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -DVSMC_HAS_CXX11LIB_RANDOM=0")
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -DVSMC_USE_RANDOM123=0")
ELSE (VSMC_USE_STD_RANDOM)
    SET (VSMC_TEST FALSE)
ENDIF (VSMC_USE_STD_RANDOM)

# Test <type_traits>
FILE (READ ${PROJECT_SOURCE_DIR}/cmake/try_type_traits.cpp TRY_TYPE_TRAITS_CPP)
SET (CMAKE_REQUIRED_FLAGS "-DVSMC_HAS_CXX11LIB_TYPE_TRAITS=1")
CHECK_CXX_SOURCE_RUNS ("${TRY_TYPE_TRAITS_CPP}" VSMC_USE_STD_TYPE_TRAITS)
SET (CMAKE_REQUIRED_FLAGS "-DVSMC_HAS_CXX11LIB_TYPE_TRAITS=0")
CHECK_CXX_SOURCE_RUNS ("${TRY_TYPE_TRAITS_CPP}" VSMC_USE_BOOST_TYPE_TRAITS)
SET (CMAKE_REQUIRED_FLAGS)

IF (VSMC_USE_STD_TYPE_TRAITS)
    SET (VSMC_TEST_FLAGS
        "${VSMC_TEST_FLAGS} -DVSMC_HAS_CXX11LIB_TYPE_TRAITS=1")
ELSEIF (VSMC_USE_BOOST_TYPE_TRAITS)
    SET (VSMC_TEST_FLAGS
        "${VSMC_TEST_FLAGS} -DVSMC_HAS_CXX11LIB_TYPE_TRAITS=0")
ELSE (VSMC_USE_STD_TYPE_TRAITS)
    SET (VSMC_TEST FALSE)
ENDIF (VSMC_USE_STD_TYPE_TRAITS)

# Test lgamma
FILE (READ ${PROJECT_SOURCE_DIR}/cmake/try_lgamma.cpp TRY_LGAMMA_CPP)
CHECK_CXX_SOURCE_RUNS ("${TRY_LGAMMA_CPP}" VSMC_USE_C99_LGAMMA)
CHECK_CXX_SOURCE_RUNS ("${TRY_LGAMMA_CPP}" VSMC_USE_STD_LGAMMA)
CHECK_CXX_SOURCE_RUNS ("${TRY_LGAMMA_CPP}" VSMC_USE_BOOST_LGAMMA)

SET (VSMC_HAS_LGAMMA TRUE)
IF (VSMC_USE_C99_LGAMMA)
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -DVSMC_USE_C99_LGAMMA")
ELSEIF (VSMC_USE_STD_LGAMMA)
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -DVSMC_USE_STD_LGAMMA")
ELSEIF (VSMC_USE_BOOST_LGAMMA)
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -DVSMC_USE_BOOST_LGAMMA")
ELSE (VSMC_USE_C99_LGAMMA)
    SET (VSMC_HAS_LGAMMA FALSE)
ENDIF (VSMC_USE_C99_LGAMMA)

# Test erf
FILE (READ ${PROJECT_SOURCE_DIR}/cmake/try_erf.cpp TRY_ERF_CPP)
CHECK_CXX_SOURCE_RUNS ("${TRY_ERF_CPP}" VSMC_USE_C99_ERF)
CHECK_CXX_SOURCE_RUNS ("${TRY_ERF_CPP}" VSMC_USE_STD_ERF)
CHECK_CXX_SOURCE_RUNS ("${TRY_ERF_CPP}" VSMC_USE_BOOST_ERF)

SET (VSMC_HAS_ERF TRUE)
IF (VSMC_USE_C99_ERF)
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -DVSMC_USE_C99_ERF")
ELSEIF (VSMC_USE_STD_ERF)
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -DVSMC_USE_STD_ERF")
ELSEIF (VSMC_USE_BOOST_ERF)
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -DVSMC_USE_BOOST_ERF")
ELSE (VSMC_USE_C99_ERF)
    SET (VSMC_HAS_ERF FALSE)
ENDIF (VSMC_USE_C99_ERF)

# Test isfinite
FILE (READ ${PROJECT_SOURCE_DIR}/cmake/try_isfinite.cpp TRY_ISFINITE_CPP)
CHECK_CXX_SOURCE_RUNS ("${TRY_ISFINITE_CPP}" VSMC_USE_C99_ISFINITE)
CHECK_CXX_SOURCE_RUNS ("${TRY_ISFINITE_CPP}" VSMC_USE_STD_ISFINITE)
CHECK_CXX_SOURCE_RUNS ("${TRY_ISFINITE_CPP}" VSMC_USE_BOOST_ISFINITE)

SET (VSMC_HAS_ISFINITE TRUE)
IF (VSMC_USE_C99_ISFINITE)
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -DVSMC_USE_C99_ISFINITE")
ELSEIF (VSMC_USE_STD_ISFINITE)
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -DVSMC_USE_STD_ISFINITE")
ELSEIF (VSMC_USE_BOOST_ISFINITE)
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -DVSMC_USE_BOOST_ISFINITE")
ELSE (VSMC_USE_C99_ISFINITE)
    SET (VSMC_HAS_ISFINITE FALSE)
ENDIF (VSMC_USE_C99_ISFINITE)

# Workaround for vanilla GCC on Mac OS X
IF (APPLE)
    FILE (READ ${PROJECT_SOURCE_DIR}/cmake/try_objc.cpp TRY_OBJC_CPP)
    CHECK_CXX_SOURCE_RUNS ("${TRY_OBJC_CPP}" HAS_OBJC_MACRO)
    CHECK_CXX_SOURCE_RUNS ("${TRY_OBJC_CPP}" HAS_OBJC2_MACRO)
    IF (HAS_OBJC_MACRO)
        SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -U__OBJC__")
    ENDIF (HAS_OBJC_MACRO)
    IF (HAS_OBJC2_MACRO)
        SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -U__OBJC2__")
    ENDIF (HAS_OBJC2_MACRO)
ENDIF (APPLE)

# Make sure __STDC_CONSTANT_MACROS is defined
SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -D__STDC_CONSTANT_MACROS")

# Disable MSVC studip iterator warning.
# Of course caller are responsible for checking bounds!
IF (MSVC)
    SET (VSMC_TEST_FLAGS "${VSMC_TEST_FLAGS} -D_SCL_SECURE_NO_WARNINGS")
ENDIF (MSVC)

IF (VSMC_TEST)
    ENABLE_TESTING ()
    ADD_SUBDIRECTORY (test EXCLUDE_FROM_ALL)
ENDIF (VSMC_TEST)
