CMAKE_MINIMUM_REQUIRED (VERSION 2.6.4)

# disable in source build
IF(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
    MESSAGE(FATAL_ERROR "In-source builds not allowed. Please make a new directory and run CMake from there.")
ENDIF(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})

PROJECT (vSMC C CXX)

# Version information
SET (VERSION_MAJOR 0)
SET (VERSION_MINOR 1)
SET (VERSION_PATCH 0)

# Global path configurations
SET (CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} /usr/local/lib64)
SET (CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} /usr/local/lib)
SET (CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} /usr/lib64)
SET (CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} /usr/lib)
SET (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake)

# Finding Packages
SET (Boost_NO_BOOST_CMAKE ON)
INCLUDE (FindBoost)
INCLUDE (FindDoxygen)
INCLUDE (FindEigen)
INCLUDE (FindMKL)
INCLUDE (FindRandom123)
INCLUDE (FindTBB)
INCLUDE (FindvDist)

# Configuration files generation
CONFIGURE_FILE (
    ${PROJECT_SOURCE_DIR}/config/version.hpp.in
    ${PROJECT_SOURCE_DIR}/include/vSMC/internal/version.hpp)

# Configuration files generation
CONFIGURE_FILE (
    ${PROJECT_SOURCE_DIR}/config/config.hpp.in
    ${PROJECT_SOURCE_DIR}/include/vSMC/internal/config.hpp)

# Include dirs
INCLUDE_DIRECTORIES (${PROJECT_SOURCE_DIR}/include)

# Installation
IF (NOT INSTALL_INCLUDE_DIR)
    SET (INSTALL_INCLUDE_DIR include)
ENDIF (NOT INSTALL_INCLUDE_DIR)

INSTALL (FILES     include/vSMC.hpp DESTINATION ${INSTALL_INCLUDE_DIR})
INSTALL (DIRECTORY include/vSMC/    DESTINATION ${INSTALL_INCLUDE_DIR}/vSMC
    PATTERN ".DS_Store" EXCLUDE
    PATTERN "*.swp"     EXCLUDE)

# Documentations
IF (DOXYGEN_FOUND)
    CONFIGURE_FILE (
	${PROJECT_SOURCE_DIR}/config/Doxyfile.in
	${PROJECT_BINARY_DIR}/Doxyfile)
    FILE (GLOB_RECURSE INCLUDE_SRC
	${PROJECT_SOURCE_DIR}/include/*.hpp)
    ADD_CUSTOM_COMMAND (
	OUTPUT  ${PROJECT_BINARY_DIR}/include
	DEPENDS ${INCLUDE_SRC}
	COMMAND ${CMAKE_COMMAND}
	ARGS -E copy_directory
	${PROJECT_SOURCE_DIR}/include
	${PROJECT_BINARY_DIR}/include)
    ADD_CUSTOM_COMMAND (
	OUTPUT  ${PROJECT_BINARY_DIR}/doc
	DEPENDS ${PROJECT_BINARY_DIR}/Doxyfile
	${PROJECT_BINARY_DIR}/include
	WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
	COMMAND ${DOXYGEN_EXECUTABLE} ARGS Doxyfile)
    ADD_CUSTOM_TARGET(docs DEPENDS ${PROJECT_BINARY_DIR}/doc)
ENDIF (DOXYGEN_FOUND)

# Testing
ENABLE_TESTING ()
ADD_SUBDIRECTORY (test EXCLUDE_FROM_ALL)
