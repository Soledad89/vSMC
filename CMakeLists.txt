CMAKE_MINIMUM_REQUIRED (VERSION 2.8)

# Disable in source build
IF(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
    MESSAGE(FATAL_ERROR "In-source builds not allowed. Please make a new directory and run CMake from there.")
ENDIF(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})

PROJECT (vSMC C CXX)

# Version information
SET (VERSION_MAJOR 0)
SET (VERSION_MINOR 9)
SET (VERSION_PATCH 0)

# Configuration files
SET (DOC_SOURCE  ${PROJECT_SOURCE_DIR}/doc)
SET (DOC_INCLUDE ${PROJECT_SOURCE_DIR}/include)
CONFIGURE_FILE (
    ${PROJECT_SOURCE_DIR}/config/version.hpp.in
    ${PROJECT_SOURCE_DIR}/include/vsmc/internal/version.hpp)
CONFIGURE_FILE (
    ${PROJECT_SOURCE_DIR}/config/Doxyfile.in
    ${PROJECT_BINARY_DIR}/Doxyfile)

# Options
OPTION (VSMC_DISABLE_TEST "Disable building tests, examples and libraries")

IF (NOT VSMC_INSTALL_INC_DIR)
    SET (VSMC_INSTALL_INC_DIR include)
ENDIF (NOT VSMC_INSTALL_INC_DIR)

# Installation
INSTALL (FILES     include/vsmc.hpp DESTINATION ${VSMC_INSTALL_INC_DIR})
INSTALL (DIRECTORY include/vsmc/    DESTINATION ${VSMC_INSTALL_INC_DIR}/vsmc
    PATTERN ".DS_Store" EXCLUDE PATTERN "*.swp"EXCLUDE)

# Documentations
INCLUDE (FindDoxygen)
FILE (GLOB_RECURSE DOC_SOURCE_FILES ${PROJECT_SOURCE_DIR}/doc/*.*)
FILE (GLOB_RECURSE DOC_INCLUDE_FILES ${PROJECT_SOURCE_DIR}/include/*.hpp)
IF (DOXYGEN_FOUND)
    ADD_CUSTOM_COMMAND (
        OUTPUT  ${PROJECT_BINARY_DIR}/doc
        DEPENDS ${PROJECT_BINARY_DIR}/Doxyfile
        ${DOC_SOURCE_FILES} ${DOC_INCLUDE_FILES}
        WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
        COMMAND ${DOXYGEN_EXECUTABLE} ARGS Doxyfile)
    ADD_CUSTOM_TARGET(docs DEPENDS ${PROJECT_BINARY_DIR}/doc)
ENDIF (DOXYGEN_FOUND)

# Finish here if we disable test
IF (VSMC_DISABLE_TEST)
    RETURN ()
ENDIF (VSMC_DISABLE_TEST)

# Module path
SET (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake)

# Required Includes
SET (CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}
    ${PROJECT_SOURCE_DIR}/include)
SET (CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}
    ${PROJECT_SOURCE_DIR}/third-party/include)

# Includes
INCLUDE_DIRECTORIES (${PROJECT_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES (SYSTEM ${PROJECT_SOURCE_DIR}/third-party/include)

SET (Boost_NO_BOOST_CMAKE     ON)
SET (Boost_USE_STATIC_LIBS    ON)
SET (Boost_USE_MULTITHREADED  ON)
SET (Boost_USE_STATIC_RUNTIME OFF)
SET (Boost_ADDITIONAL_VERSIONS
    "1.49" "1.49.0" "1.50" "1.50.0" "1.51" "1.51.0", "1.52", "1.52.0")
INCLUDE (FindBoost)
IF (Boost_FOUND)
    INCLUDE_DIRECTORIES (SYSTEM ${Boost_INCLUDE_DIRS})
ENDIF (Boost_FOUND)

INCLUDE (FindOpenCL)
IF (OPENCL_FOUND)
    INCLUDE_DIRECTORIES (SYSTEM ${OpenCL_INCLUDE_DIR})
    SET (VSMC_CL_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/include)
    SET (VSMC_R123_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/third-party/include)
ENDIF (OPENCL_FOUND)

INCLUDE (FindTBB)
IF (TBB_FOUND)
    INCLUDE_DIRECTORIES (SYSTEM ${TBB_INCLUDE_DIR})
ENDIF (TBB_FOUND)

IF (${CMAKE_CXX_COMPILER_ID} MATCHES "Intel")
    INCLUDE (FindCilk)
ENDIF (${CMAKE_CXX_COMPILER_ID} MATCHES "Intel")

IF (NOT ${CMAKE_CXX_COMPILER_ID} MATCHES "Clang")
    INCLUDE (FindOpenMP)
    INCLUDE (vSMCFindOpenMP)
ENDIF (NOT ${CMAKE_CXX_COMPILER_ID} MATCHES "Clang")

# Special math functions flags
INCLUDE (FindCXXMathErf)
IF (CXX_MATH_ERF_C99_FOUND)
    ADD_DEFINITIONS (-DVSMC_USE_C99_ERF)
ELSEIF (CXX_MATH_ERF_STD_FOUND)
    ADD_DEFINITIONS (-DVSMC_USE_STD_ERF)
ELSEIF (CXX_MATH_ERF_BOOST_FOUND)
    ADD_DEFINITIONS (-DVSMC_USE_BOOST_ERF)
ENDIF (CXX_MATH_ERF_C99_FOUND)

INCLUDE (FindCXXMathIsfinite)
IF (CXX_MATH_ISFINITE_C99_FOUND)
    ADD_DEFINITIONS (-DVSMC_USE_C99_ISFINITE)
ELSEIF (CXX_MATH_ISFINITE_STD_FOUND)
    ADD_DEFINITIONS (-DVSMC_USE_STD_ISFINITE)
ELSEIF (CXX_MATH_ISFINITE_BOOST_FOUND)
    ADD_DEFINITIONS (-DVSMC_USE_BOOST_ISFINITE)
ENDIF (CXX_MATH_ISFINITE_C99_FOUND)

INCLUDE (FindCXXMathLgamma)
IF (CXX_MATH_LGAMMA_C99_FOUND)
    ADD_DEFINITIONS (-DVSMC_USE_C99_LGAMMA)
ELSEIF (CXX_MATH_LGAMMA_STD_FOUND)
    ADD_DEFINITIONS (-DVSMC_USE_STD_LGAMMA)
ELSEIF (CXX_MATH_LGAMMA_BOOST_FOUND)
    ADD_DEFINITIONS (-DVSMC_USE_BOOST_LGAMMA)
ENDIF (CXX_MATH_LGAMMA_C99_FOUND)

# C++11 libs flags
INCLUDE (vSMCFindFunctional)
IF (VSMC_FUNCTIONAL_STD_FOUND)
    ADD_DEFINITIONS (-DVSMC_HAS_CXX11LIB_FUNCTIONAL=1)
ELSE (VSMC_FUNCTIONAL_STD_FOUND)
    ADD_DEFINITIONS (-DVSMC_HAS_CXX11LIB_FUNCTIONAL=0)
ENDIF (VSMC_FUNCTIONAL_STD_FOUND)

INCLUDE (vSMCFindMutex)
IF (VSMC_MUTEX_STD_FOUND)
    ADD_DEFINITIONS (-DVSMC_HAS_CXX11LIB_MUTEX=1)
ELSE (VSMC_MUTEX_STD_FOUND)
    ADD_DEFINITIONS (-DVSMC_HAS_CXX11LIB_MUTEX=0)
ENDIF (VSMC_MUTEX_STD_FOUND)

INCLUDE (vSMCFindRandom)
IF (VSMC_RANDOM_STD_FOUND)
    ADD_DEFINITIONS (-DVSMC_HAS_CXX11LIB_RANDOM=1)
ELSE (VSMC_RANDOM_STD_FOUND)
    ADD_DEFINITIONS (-DVSMC_HAS_CXX11LIB_RANDOM=0)
ENDIF (VSMC_RANDOM_STD_FOUND)

INCLUDE (vSMCFindThread)
IF (VSMC_THREAD_STD_FOUND)
    ADD_DEFINITIONS (-DVSMC_HAS_CXX11LIB_THREAD=1)
ELSE (VSMC_THREAD_STD_FOUND)
    ADD_DEFINITIONS (-DVSMC_HAS_CXX11LIB_THREAD=0)
ENDIF (VSMC_THREAD_STD_FOUND)

INCLUDE (vSMCFindTypeTraits)
IF (VSMC_TYPE_TRAITS_STD_FOUND)
    ADD_DEFINITIONS (-DVSMC_HAS_CXX11LIB_TYPE_TRAITS=1)
ELSE (VSMC_TYPE_TRAITS_STD_FOUND)
    ADD_DEFINITIONS (-DVSMC_HAS_CXX11LIB_TYPE_TRAITS=0)
ENDIF (VSMC_TYPE_TRAITS_STD_FOUND)

# Make sure __STDC_CONSTANT_MACROS is defined
ADD_DEFINITIONS (-D__STDC_CONSTANT_MACROS)

# Workaround for vanilla GCC on Mac OS X
ADD_DEFINITIONS (-U__OBJC__)
ADD_DEFINITIONS (-U__OBJC2__)

# Disable MSVC iterator warning. Callers are responsible for checking bounds!
ADD_DEFINITIONS (-D_SCL_SECURE_NO_WARNINGS)

IF (VSMC_FUNCTIONAL_FOUND AND VSMC_RANDOM_FOUND AND VSMC_TYPE_TRAITS_FOUND)
    INCLUDE (vSMCFunctions)
    ENABLE_TESTING ()
    ADD_SUBDIRECTORY (capi EXCLUDE_FROM_ALL)
    ADD_SUBDIRECTORY (test EXCLUDE_FROM_ALL)
ENDIF (VSMC_FUNCTIONAL_FOUND AND VSMC_RANDOM_FOUND AND VSMC_TYPE_TRAITS_FOUND)
