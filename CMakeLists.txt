CMAKE_MINIMUM_REQUIRED (VERSION 2.6.4)

# disable in source build
IF(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
    MESSAGE(FATAL_ERROR "In-source builds not allowed. Please make a new directory and run CMake from there.")
ENDIF(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})

PROJECT (vSMC C CXX)

# Version information
SET (VERSION_MAJOR 0)
SET (VERSION_MINOR 1)
SET (VERSION_PATCH 0)

# Global path configurations
SET (CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} /usr/local/lib64)
SET (CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} /usr/local/lib)
SET (CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} /usr/lib64)
SET (CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} /usr/lib)
SET (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake)

# Finding Packages
IF (MSVC)
    IF (NOT BOOST_ROOT)
        SET (BOOST_ROOT "C:/Program Files/Boost")
    ENDIF (NOT BOOST_ROOT)
    IF (NOT Eigen_INC_PATH)
        SET (Eigen_INC_PATH "C:/Program Files/Eigen")
    ENDIF (NOT Eigen_INC_PATH)
    IF (NOT Random123_INC_PATH)
        SET (Random123_INC_PATH "C:/Program Files/Random123/include")
    ENDIF (NOT Random123_INC_PATH)
ENDIF (MSVC)
SET (Boost_NO_BOOST_CMAKE ON)
INCLUDE (FindBoost)
INCLUDE (FindDoxygen)
INCLUDE (FindEigen)
INCLUDE (FindMKL)
INCLUDE (FindRandom123)
INCLUDE (FindTBB)
INCLUDE (FindvDist)

# Configuration files generation
CONFIGURE_FILE (
    ${PROJECT_SOURCE_DIR}/config/version.hpp.in
    ${PROJECT_SOURCE_DIR}/include/vSMC/internal/version.hpp)

CONFIGURE_FILE (
    ${PROJECT_SOURCE_DIR}/config/config.hpp.in
    ${PROJECT_SOURCE_DIR}/include/vSMC/internal/config.hpp)

# Installation
IF (NOT INSTALL_INCLUDE_DIR)
    SET (INSTALL_INCLUDE_DIR include)
ENDIF (NOT INSTALL_INCLUDE_DIR)
INSTALL (FILES     include/vSMC.hpp DESTINATION ${INSTALL_INCLUDE_DIR})
INSTALL (DIRECTORY include/vSMC/    DESTINATION ${INSTALL_INCLUDE_DIR}/vSMC
    PATTERN ".DS_Store" EXCLUDE
    PATTERN "*.swp"     EXCLUDE)

# Documentations
IF (DOXYGEN_FOUND)
    CONFIGURE_FILE (
        ${PROJECT_SOURCE_DIR}/config/Doxyfile.in
        ${PROJECT_BINARY_DIR}/Doxyfile)
    FILE (GLOB_RECURSE INCLUDE_SRC
        ${PROJECT_SOURCE_DIR}/include/*.hpp)
    ADD_CUSTOM_COMMAND (
        OUTPUT  ${PROJECT_BINARY_DIR}/include
        DEPENDS ${INCLUDE_SRC}
        COMMAND ${CMAKE_COMMAND}
        ARGS -E copy_directory
        ${PROJECT_SOURCE_DIR}/include
        ${PROJECT_BINARY_DIR}/include)
    FILE (READ ${PROJECT_SOURCE_DIR}/README.markdown README)
    FILE (WRITE ${PROJECT_SOURCE_DIR}/doc/main.markdown
        "vSMC {#mainpage}\n================\n\n${README}\n\n")
    FILE (APPEND ${PROJECT_SOURCE_DIR}/doc/main.markdown
        "# Tutorials\n\n"
        "- \\ref tutorial-pf\n"
        "- \\ref tutorial-gmm\n"
        "- \\ref tutorial-sampler\n"
        "- \\ref tutorial-monitor\n")
    FILE (GLOB_RECURSE DOC_SRC
        ${PROJECT_SOURCE_DIR}/doc/*.markdown
        ${PROJECT_SOURCE_DIR}/doc/*.html
        ${PROJECT_SOURCE_DIR}/doc/*.css)
    ADD_CUSTOM_COMMAND (
        OUTPUT  ${PROJECT_BINARY_DIR}/doc_src
        DEPENDS ${DOC_SRC}
        COMMAND ${CMAKE_COMMAND}
        ARGS -E copy_directory
        ${PROJECT_SOURCE_DIR}/doc
        ${PROJECT_BINARY_DIR}/doc_src)
    FILE (GLOB_RECURSE PF_SRC
        ${PROJECT_SOURCE_DIR}/test/pf/*.hpp
        ${PROJECT_SOURCE_DIR}/test/pf/*.cpp)
    ADD_CUSTOM_COMMAND (
        OUTPUT  ${PROJECT_BINARY_DIR}/example/pf
        DEPENDS ${PF_SRC}
        COMMAND ${CMAKE_COMMAND}
        ARGS -E copy_directory
        ${PROJECT_SOURCE_DIR}/test/pf
        ${PROJECT_BINARY_DIR}/example/pf)
    ADD_CUSTOM_COMMAND (
        OUTPUT  ${PROJECT_BINARY_DIR}/doc
        DEPENDS ${PROJECT_BINARY_DIR}/Doxyfile
        ${PROJECT_BINARY_DIR}/include
        ${PROJECT_BINARY_DIR}/doc_src
        ${PROJECT_BINARY_DIR}/example/pf
        WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
        COMMAND ${DOXYGEN_EXECUTABLE} ARGS Doxyfile)
    ADD_CUSTOM_TARGET(docs DEPENDS ${PROJECT_BINARY_DIR}/doc)
ENDIF (DOXYGEN_FOUND)

# Testing
INCLUDE (CheckCXXSourceRuns)

INCLUDE_DIRECTORIES (${PROJECT_SOURCE_DIR}/include)
SET (CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}
    ${PROJECT_SOURCE_DIR}/include)

IF (Boost_FOUND)
    INCLUDE_DIRECTORIES (${Boost_INCLUDE_DIRS})
    SET (CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}
        ${Boost_INCLUDE_DIRS})
ENDIF (Boost_FOUND)

IF (Eigen_FOUND)
    INCLUDE_DIRECTORIES (${Eigen_INCLUDE_DIR})
    SET (CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}
        ${Eigen_INCLUDE_DIR})
ENDIF (Eigen_FOUND)

IF (Random123_FOUND)
    INCLUDE_DIRECTORIES (${Random123_INCLUDE_DIR})
    SET (CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}
        ${Random123_INCLUDE_DIR})
ENDIF (Random123_FOUND)

IF (TBB_FOUND)
    INCLUDE_DIRECTORIES (${TBB_INCLUDE_DIR})
    SET (CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}
        ${TBB_INCLUDE_DIR})
ENDIF (TBB_FOUND)

IF (MKL_FOUND)
    INCLUDE_DIRECTORIES (${MKL_INCLUDE_DIR})
    SET (CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}
        ${MKL_INCLUDE_DIR})
ENDIF (MKL_FOUND)

IF (vDist_FOUND)
    INCLUDE_DIRECTORIES (${vDist_INCLUDE_DIR})
    SET (CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES}
        ${vDist_INCLUDE_DIR})
ENDIF (vDist_FOUND)

SET (V_SMC_TEST TRUE)

IF (Eigen_FOUND AND Random123_FOUND)
    # Test <functional>
    FILE (READ ${PROJECT_SOURCE_DIR}/cmake/try_function.cpp TRY_FUNCTION_CPP)
    CHECK_CXX_SOURCE_RUNS ("${TRY_FUNCTION_CPP}" V_SMC_USE_STD_FUNCTION)
    CHECK_CXX_SOURCE_RUNS ("${TRY_FUNCTION_CPP}" V_SMC_USE_BOOST_FUNCTION)

    IF (V_SMC_FUNCTION)
        STRING (REGEX MATCH "std" V_SMC_STD_FUNCTION ${V_SMC_FUNCTION})
        STRING (REGEX MATCH "boost" V_SMC_BOOST_FUNCTION ${V_SMC_FUNCTION})
    ENDIF (V_SMC_FUNCTION)

    IF (NOT ( # No match between prefered and available
        (V_SMC_STD_FUNCTION AND V_SMC_USE_STD_FUNCTION) OR
        (V_SMC_BOOST_FUNCTION AND V_SMC_USE_BOOST_FUNCTION)))
        SET (V_SMC_STD_FUNCTION TRUE)
        SET (V_SMC_BOOST_FUNCTION TRUE)
    ENDIF (NOT ( # No match between prefered and available
        (V_SMC_STD_FUNCTION AND V_SMC_USE_STD_FUNCTION) OR
        (V_SMC_BOOST_FUNCTION AND V_SMC_USE_BOOST_FUNCTION)))

    IF (V_SMC_STD_FUNCTION AND V_SMC_USE_STD_FUNCTION)
        SET (V_SMC_TEST_FLAGS "${V_SMC_TEST_FLAGS} -DV_SMC_USE_STD_FUNCTION")
    ELSEIF (V_SMC_BOOST_FUNCTION AND V_SMC_USE_BOOST_FUNCTION)
        SET (V_SMC_TEST_FLAGS "${V_SMC_TEST_FLAGS} -DV_SMC_USE_BOOST_FUNCTION")
    ELSE (V_SMC_STD_FUNCTION AND V_SMC_USE_STD_FUNCTION)
        SET (V_SMC_TEST FALSE)
    ENDIF (V_SMC_STD_FUNCTION AND V_SMC_USE_STD_FUNCTION)

    # Test <random>
    FILE (READ ${PROJECT_SOURCE_DIR}/cmake/try_random.cpp TRY_RANDOM_CPP)
    CHECK_CXX_SOURCE_RUNS ("${TRY_RANDOM_CPP}" V_SMC_USE_STD_RANDOM)
    CHECK_CXX_SOURCE_RUNS ("${TRY_RANDOM_CPP}" V_SMC_USE_BOOST_RANDOM)

    IF (V_SMC_RANDOM)
        STRING (REGEX MATCH "std" V_SMC_STD_RANDOM ${V_SMC_RANDOM})
        STRING (REGEX MATCH "boost" V_SMC_BOOST_RANDOM ${V_SMC_RANDOM})
    ENDIF (V_SMC_RANDOM)

    IF (NOT ( # No match between prefered and available
        (V_SMC_STD_RANDOM AND V_SMC_USE_STD_RANDOM) OR
        (V_SMC_BOOST_RANDOM AND V_SMC_USE_BOOST_RANDOM)))
        SET (V_SMC_STD_RANDOM TRUE)
        SET (V_SMC_BOOST_RANDOM TRUE)
    ENDIF (NOT ( # No match between prefered and available
        (V_SMC_STD_RANDOM AND V_SMC_USE_STD_RANDOM) OR
        (V_SMC_BOOST_RANDOM AND V_SMC_USE_BOOST_RANDOM)))

    IF (V_SMC_STD_RANDOM AND V_SMC_USE_STD_RANDOM)
        SET (V_SMC_TEST_FLAGS "${V_SMC_TEST_FLAGS} -DV_SMC_USE_STD_RANDOM")
    ELSEIF (V_SMC_BOOST_RANDOM AND V_SMC_USE_BOOST_RANDOM)
        SET (V_SMC_TEST_FLAGS "${V_SMC_TEST_FLAGS} -DV_SMC_USE_BOOST_RANDOM")
    ELSE (V_SMC_STD_RANDOM AND V_SMC_USE_STD_RANDOM)
        SET (V_SMC_TEST FALSE)
    ENDIF (V_SMC_STD_RANDOM AND V_SMC_USE_STD_RANDOM)

    MESSAGE (STATUS "Compile tests with flags: ${V_SMC_TEST_FLAGS}")
ELSE (Eigen_FOUND AND Random123_FOUND)
    SET (V_SMC_TEST FALSE)
ENDIF (Eigen_FOUND AND Random123_FOUND)

IF (V_SMC_TEST)
    ENABLE_TESTING ()
    ADD_SUBDIRECTORY (test EXCLUDE_FROM_ALL)
ENDIF (V_SMC_TEST)
